package com.hyva.idm.sass.sassendpoints;


import com.google.gson.Gson;
import com.hyva.idm.icitem.IcItem;
import com.hyva.idm.icitem.IcItemRepository;
import com.hyva.idm.icitem.IcItempojo;
import com.hyva.idm.sass.sassconstant.HiConnectConstants;
import com.hyva.idm.pojo.IDMResponse;
import com.hyva.idm.sass.sassentities.Cartregistration;
import com.hyva.idm.sass.sassentities.CustomerNotifications;
import com.hyva.idm.sass.sassentities.SassCustomer;
import com.hyva.idm.sass.sassentities.TransactionsData;
import com.hyva.idm.sass.sasspojo.CartRegistrationPojo;
import com.hyva.idm.sass.sasspojo.CustomerListBasedOnToRegNoPojo;
import com.hyva.idm.sass.sasspojo.CustomerNotificationsPojo;
import com.hyva.idm.sass.sasspojo.TransactionsDataPojo;
import com.hyva.idm.sass.sassrespositories.CartRegistrationRepository;
import com.hyva.idm.sass.sassrespositories.SaasTranscationsDataRepository;
import com.hyva.idm.sass.sassservice.SaasTranscationsDataService;
import com.hyva.idm.sass.sassservice.SassControlPanelService;
import com.hyva.idm.sass.sassservice.SassCustomerNotificationsService;
import com.hyva.idm.sass.sassservice.SassOrdersService;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import java.util.List;

/**
 * Created by azgar on 1/6/18.
 */
@RestController
@RequestMapping(HiConnectConstants.HI_CONNECT_SERVICES)
public class HiConnectEndPoint {
    @Autowired
    SassOrdersService sassOrdersService;
    @Autowired
    SassCustomerNotificationsService sassCustomerNotificationsService;
    @Autowired
    SaasTranscationsDataService saasTranscationsDataService;
    @Autowired
    SassControlPanelService sassControlPanelService;
    @Autowired
    CartRegistrationRepository cartRegistrationRepository;
    @Autowired
    IcItemRepository icItemRepository;

    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_COMPANY_SEARCH, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse searchCompanyNames(@RequestBody String jsonString) throws JSONException {
        JSONObject jsonObject = new JSONObject(jsonString);
        if (jsonObject.length() > 0) {
            String CompanyName = jsonObject.getString("company_name");
            List<SassCustomer> customersList = sassOrdersService.getCompanyNamesListFromCustomers(CompanyName);
            Gson gson = new Gson();
            String jsonCartList = gson.toJson(customersList);
            return new IDMResponse(HttpStatus.OK.value(), "success", jsonCartList);
        } else {
            return new IDMResponse(HttpStatus.OK.value(), "empty value ");
        }
    }


    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_NOTIFICATION_COMPANY_FOR_SUPPLIER, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse setHiConnectNotificationsCompanyForSupplier(@RequestBody String jsonString) throws JSONException {
        JSONObject jsonObject = new JSONObject(jsonString);


        return new IDMResponse(HttpStatus.OK.value(), "success");
    }


    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_SET_NOTIFICATION_COMPANY, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse setHiConnectNotificationsCompany(@RequestBody String jsonString) throws JSONException {
        JSONObject jsonObject = new JSONObject(jsonString);
        Gson gson = new Gson();
        CustomerNotificationsPojo customerNotificationsObj = gson.fromJson(jsonObject.toString(), CustomerNotificationsPojo.class);
        List<SassCustomer> toreglist = sassOrdersService.getSaasCustomerRegNo(customerNotificationsObj.getToRegno());
        List<SassCustomer> fromreglist = sassOrdersService.getSaasCustomerRegNo(customerNotificationsObj.getFromRegno());
        sassCustomerNotificationsService.getCustomerNotificationSave(customerNotificationsObj, toreglist, fromreglist);
        return new IDMResponse(HttpStatus.OK.value(), "success");
    }

    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_C0NNECT_ACCEPT_REJECT_NOTIFICATION_FOR_SUPP, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse confirmAcceptanceOrRejectNotificationsForSupp(@RequestBody String jsonString) throws JSONException {
        JSONObject jsonObject = new JSONObject(jsonString);
        Gson gson = new Gson();
        CustomerNotificationsPojo customerNotificationsObj = gson.fromJson(jsonObject.toString(), CustomerNotificationsPojo.class);
        List<SassCustomer> toreglist = sassOrdersService.getSaasCustomerRegNo(customerNotificationsObj.getToRegno());
        List<SassCustomer> fromreglist = sassOrdersService.getSaasCustomerRegNo(customerNotificationsObj.getFromRegno());
        sassCustomerNotificationsService.getCustomerNotificationSave(customerNotificationsObj, toreglist, fromreglist);
        return new IDMResponse(HttpStatus.OK.value(), "success");
    }


    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_C0NNECT_ACCEPT_REJECT_NOTIFICATION, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse confirmAcceptanceOrRejectNotifications(@RequestBody String jsonString) throws JSONException {
        JSONObject jsonObject = new JSONObject(jsonString);
        Gson gson = new Gson();
        CustomerNotificationsPojo customerNotificationsObj = gson.fromJson(jsonObject.toString(), CustomerNotificationsPojo.class);
        List<SassCustomer> toreglist = sassOrdersService.getSaasCustomerRegNo(customerNotificationsObj.getToRegno());
        List<SassCustomer> fromreglist = sassOrdersService.getSaasCustomerRegNo(customerNotificationsObj.getFromRegno());
        sassCustomerNotificationsService.getCustomerNotificationSave(customerNotificationsObj, toreglist, fromreglist);
        return new IDMResponse(HttpStatus.OK.value(), "success");
    }


    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_NOTIFICATIONS, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public Object getHiConnectNotifications(@RequestBody String jsonString) throws JSONException {
        JSONObject jsonObject = new JSONObject(jsonString);
        String regNo = jsonObject.getString("regno");
        String typeFlag = jsonObject.getString("type_flag");
        String status = "";
        CustomerNotifications gettingstatus = sassCustomerNotificationsService.getStatus(regNo, typeFlag);
        if (gettingstatus != null) {
            status = gettingstatus.getStatus();
        } else {
            status = "pending";
        }
        List<SassCustomer> saasCustomerList = null;
        List<CustomerNotifications> regNoList = null;
        if (!status.equalsIgnoreCase("close")) {
            regNoList = sassCustomerNotificationsService.getCustomerRegNo(regNo, status);
        } else {
            regNoList = sassCustomerNotificationsService.getCustomerRegNo("0", "");
        }
//        if(status=="Accepted"){
//            regNoList=sassCustomerNotificationsService.getCustomerRegNo(regNo,status);
//        }

        if (regNoList.size() > 0) {
            saasCustomerList = sassOrdersService.getSaasCustomerRegNo(regNoList.get(0).getFromRegno());
        } else {
            saasCustomerList = sassOrdersService.getSaasCustomerRegNo("0");
        }
        CustomerListBasedOnToRegNoPojo custNtftnList = new CustomerListBasedOnToRegNoPojo();
        custNtftnList.setSassCustomerList(saasCustomerList);
        custNtftnList.setCustomerNotificationsList(regNoList);
        List<TransactionsData> transactionsDataList = sassOrdersService.getTransactionList();
        custNtftnList.setTransactionsDataList(transactionsDataList);
        Gson gson = new Gson();
        String custNotftnList = gson.toJson(custNtftnList);
        return new IDMResponse(HttpStatus.OK.value(), "success", custNotftnList);
    }


    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_NOTIFICATION_TRANSACTION_DATA, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse getNotificationTransactionData(@RequestBody String jsonString) throws JSONException {
        JSONObject jsonObject = new JSONObject(jsonString);


        return new IDMResponse(HttpStatus.OK.value(), "success");
    }


    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_BROADCAST_PO_DATA, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse BroadCastPostPurchaseOrderData(@RequestBody String jsonString) throws JSONException {
        SassCustomer customerObj = null;
        JSONObject jsonObject = new JSONObject(jsonString);
        Gson gson = new Gson();
        String status = "pending";
        CustomerNotificationsPojo customerNotificationsPojo = new CustomerNotificationsPojo();
        customerNotificationsPojo.setObjectdata(jsonObject.get("selectedItemsList").toString());
        customerNotificationsPojo.setTotalcheckoutamt(jsonObject.get("totalCheckOutamt").toString());
        customerNotificationsPojo.setTotaltax(jsonObject.get("totalTaxAmt").toString());
        customerNotificationsPojo.setFromRegno(jsonObject.get("from_reg").toString());
        customerNotificationsPojo.setToRegno(jsonObject.get("to_reg").toString());
        customerNotificationsPojo.setTypeDoc(jsonObject.get("type_doc").toString());
        customerNotificationsPojo.setTypeFlag(jsonObject.get("type_flag").toString());
        customerNotificationsPojo.setStatus(status);
        customerNotificationsPojo.setPiNo(jsonObject.get("piNo").toString());
        customerObj = sassOrdersService.getSaasCustomerRegNoObj(customerNotificationsPojo.getFromRegno());
        customerNotificationsPojo.setFromCompname(customerObj.getCustomerName());


//        TransactionsDataPojo transactionsDataPojo = new TransactionsDataPojo();
//        transactionsDataPojo.setObjectdata(jsonObject.get("selectedItemsList").toString());
////        transactionsDataPojo.setStatus(jsonObject.get("status").toString());
//        transactionsDataPojo.setStatus(status);
//        transactionsDataPojo.setTotalcheckoutamt(jsonObject.get("totalCheckOutamt").toString());
//        transactionsDataPojo.setTotaltax(jsonObject.get("totalTaxAmt").toString());
//        transactionsDataPojo.setTypeDoc(jsonObject.get("type_doc").toString());
//        transactionsDataPojo.setTypeFlag(jsonObject.get("type_flag").toString());
//        transactionsDataPojo.setFromCompname(jsonObject.get("supplierName").toString());
        sassCustomerNotificationsService.getPurchaseOrderSave(customerNotificationsPojo);
        return new IDMResponse(HttpStatus.OK.value(), "success");
    }

    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_BROADCAST_RI_DATA, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse BroadCastPostReceiveItemData(@RequestBody String jsonString) throws JSONException {
        SassCustomer customerObj = null;
        Gson gson = new Gson();
        JSONObject jsonObject = new JSONObject(jsonString);
//        Long transaction_id = Long.valueOf(jsonObject.get("transactionId").toString());
//        String status ="Accepted";

        CustomerNotificationsPojo customerNotificationsPojo = new CustomerNotificationsPojo();
        customerNotificationsPojo.setObjectdata(jsonObject.get("selectedItemsdata").toString());
        customerNotificationsPojo.setTotalcheckoutamt(jsonObject.get("totalCheckOutamt").toString());
        customerNotificationsPojo.setTotaltax(jsonObject.get("totalTaxAmt").toString());
        customerNotificationsPojo.setTypeDoc(jsonObject.get("typeDoc").toString());
        customerNotificationsPojo.setTypeFlag(jsonObject.get("typeFlag").toString());
        customerNotificationsPojo.setStatus(jsonObject.get("status").toString());
        customerNotificationsPojo.setPiNo(jsonObject.get("piNo").toString());
        customerNotificationsPojo.setFromRegno(jsonObject.get("from_reg").toString());
        customerNotificationsPojo.setState(jsonObject.get("supplierState").toString());
        customerNotificationsPojo.setCustNotiId(Long.valueOf(jsonObject.get("custNotiId").toString()));
        customerObj = sassOrdersService.getSaasCustomerRegNoObj(customerNotificationsPojo.getFromRegno());
        customerNotificationsPojo.setFromCompname(customerObj.getCustomerName());
//
//        TransactionsData transactionsData = sassOrdersService.getTransactionObject(transaction_id);
//        transactionsData.setStatus(status);
//        transactionsData.setTypeDoc(jsonObject.get("typeDoc").toString());
////      transactionsData.setTypeFlag(jsonObject.get("typeFlag").toString());
//        transactionsData.setTransactionId(Long.valueOf(jsonObject.get("transaction_id").toString()));
        sassCustomerNotificationsService.getPurchaseReceiveItemSave(customerNotificationsPojo);
        return new IDMResponse(HttpStatus.OK.value(), "success");

    }

    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_BROADCAST_PCN_DATA, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse BroadCastPostPurchaseCreditData(@RequestBody String jsonString) throws JSONException {
        JSONObject jsonObject = new JSONObject(jsonString);
        Long transaction_id = Long.valueOf(jsonObject.get("transaction_id").toString());
        String status = "Accepted";
        TransactionsData transactionsData = sassOrdersService.getTransactionObject(transaction_id);
        transactionsData.setStatus(status);
        transactionsData.setTypeDoc(jsonObject.get("typeDoc").toString());
//        transactionsData.setTypeFlag(jsonObject.get("typeFlag").toString());
        transactionsData.setTransactionId(Long.valueOf(jsonObject.get("transaction_id").toString()));
        saasTranscationsDataService.getPurchaseCreditNoteSave(transactionsData);
        return new IDMResponse(HttpStatus.OK.value(), "success");

    }

    //SupplierPayment
    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_BROADCAST_SP_DATA, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse BroadCastPostSupplierPaymentData(@RequestBody String jsonString) throws JSONException {
        JSONObject jsonObject = new JSONObject(jsonString);
        Gson gson = new Gson();
        String status = "pending";
        CustomerNotifications customerNotifications = new CustomerNotifications();
        customerNotifications.setObjectdata(jsonString);
        customerNotifications.setStatus(status);
        customerNotifications.setTypeFlag(jsonObject.get("type_flag").toString());
        customerNotifications.setTypeDoc(jsonObject.get("type_doc").toString());
        customerNotifications.setFromCompname(jsonObject.get("supplierName").toString());
        saasTranscationsDataService.getSupplierPaymentSave(customerNotifications);
        return new IDMResponse(HttpStatus.OK.value(), "success");
    }

    //SalesInvoice
    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_SI_DATA, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse BroadCastPostSalesInvoiceData(@RequestBody String jsonString) throws JSONException {
        SassCustomer customerObj = null;
        JSONObject jsonObject = new JSONObject(jsonString);
        Gson gson = new Gson();
        String status = "pending";
        CustomerNotificationsPojo customerNotificationsPojo = new CustomerNotificationsPojo();
        customerNotificationsPojo.setObjectdata(jsonObject.get("selectedItemsList").toString());
        customerNotificationsPojo.setTotalcheckoutamt(jsonObject.get("totalCheckOutamt").toString());
        customerNotificationsPojo.setTotaltax(jsonObject.get("totalTaxAmt").toString());
        customerNotificationsPojo.setFromRegno(jsonObject.get("from_reg").toString());
        customerNotificationsPojo.setToRegno(jsonObject.get("to_reg").toString());
        customerNotificationsPojo.setTypeDoc(jsonObject.get("typeDoc").toString());
        customerNotificationsPojo.setTypeFlag(jsonObject.get("type_flag").toString());
        customerNotificationsPojo.setStatus(status);
        customerNotificationsPojo.setSiNo(jsonObject.get("siNo").toString());
        customerObj = sassOrdersService.getSaasCustomerRegNoObj(customerNotificationsPojo.getFromRegno());
        customerNotificationsPojo.setFromCompname(customerObj.getCustomerName());

//        customerNotificationsPojo.setSiNo(jsonObject.get("siNo").toString());
        sassCustomerNotificationsService.getSalesInvoiceSave(customerNotificationsPojo);
        return new IDMResponse(HttpStatus.OK.value(), "success");
    }

    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_CART_LIST, method = RequestMethod.POST)
    public IDMResponse searchAddedCartNames() throws JSONException {
        List<CartRegistrationPojo> cartregistrations = sassControlPanelService.cartRegistrationPojoList();
        Gson gson = new Gson();
        String jsonCartList = gson.toJson(cartregistrations);
        return new IDMResponse(HttpStatus.OK.value(), "success", jsonCartList);
    }

    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_BROADCAST_DO_DATA, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse BroadCastPostSalesDeliveryOrderData(@RequestBody String jsonString) throws JSONException {
        SassCustomer customerObj = null;
        JSONObject jsonObject = new JSONObject(jsonString);
        Gson gson = new Gson();
        String status = "pending";

        CustomerNotificationsPojo customerNotificationsPojo = new CustomerNotificationsPojo();
        customerNotificationsPojo.setObjectdata(jsonObject.get("selectedItemsList").toString());
        customerNotificationsPojo.setTotalcheckoutamt(jsonObject.get("totalCheckOutamt").toString());
        customerNotificationsPojo.setTotaltax(jsonObject.get("totalTaxAmt").toString());
        customerNotificationsPojo.setFromRegno(jsonObject.get("from_reg").toString());
        customerNotificationsPojo.setToRegno(jsonObject.get("to_reg").toString());
        customerNotificationsPojo.setTypeDoc(jsonObject.get("type_doc").toString());
        customerNotificationsPojo.setTypeFlag(jsonObject.get("type_flag").toString());
        customerNotificationsPojo.setStatus(status);
        customerNotificationsPojo.setSiNo(jsonObject.get("siNo").toString());
        customerObj = sassOrdersService.getSaasCustomerRegNoObj(customerNotificationsPojo.getFromRegno());
        customerNotificationsPojo.setFromCompname(customerObj.getCustomerName());

//        TransactionsDataPojo transactionsDataPojo = new TransactionsDataPojo();
//        transactionsDataPojo.setObjectdata(jsonObject.get("selectedItemsList").toString());
////        transactionsDataPojo.setStatus(jsonObject.get("status").toString());
//        transactionsDataPojo.setStatus(status);
//        transactionsDataPojo.setTotalcheckoutamt(jsonObject.get("totalCheckOutamt").toString());
//        transactionsDataPojo.setTotaltax(jsonObject.get("totalTaxAmt").toString());
//        transactionsDataPojo.setTypeDoc(jsonObject.get("type_doc").toString());
//        transactionsDataPojo.setTypeFlag(jsonObject.get("type_flag").toString());
//        transactionsDataPojo.setFromCompname(jsonObject.get("cutomerName").toString());
        sassCustomerNotificationsService.getSalesDOSave(customerNotificationsPojo);
        return new IDMResponse(HttpStatus.OK.value(), "success");
    }

    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_BROADCAST_RRI_DATA, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse BroadCastPostRRIData(@RequestBody String jsonString) throws JSONException {
        JSONObject jsonObject = new JSONObject(jsonString);
        Gson gson = new Gson();
        String status = "pending";
        TransactionsDataPojo transactionsDataPojo = new TransactionsDataPojo();
        transactionsDataPojo.setObjectdata(jsonObject.get("selectedItemsList").toString());
//        transactionsDataPojo.setStatus(jsonObject.get("status").toString());
        transactionsDataPojo.setStatus(status);
        transactionsDataPojo.setTotalcheckoutamt(jsonObject.get("totalCheckOutamt").toString());
        transactionsDataPojo.setTotaltax(jsonObject.get("totalTaxAmt").toString());
        transactionsDataPojo.setTypeDoc(jsonObject.get("type_doc").toString());
        transactionsDataPojo.setTypeFlag(jsonObject.get("type_flag").toString());
//        transactionsDataPojo.setFromCompname(jsonObject.get("supplierName").toString());
        saasTranscationsDataService.getPurchaseRRI(transactionsDataPojo);
        return new IDMResponse(HttpStatus.OK.value(), "success");
    }
//
//    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION  + HiConnectConstants.HI_CONNECT_BROADCAST_DN_DATA,method = RequestMethod.POST,
//            produces = MediaType.APPLICATION_JSON_VALUE)
//    public IDMResponse BroadCastPostSalesDebitNoteData(@RequestBody String jsonString) throws JSONException {
//        JSONObject jsonObject = new JSONObject(jsonString);
//        Gson gson = new Gson();
//        String status = "pending";
//        TransactionsDataPojo transactionsDataPojo = new TransactionsDataPojo();
//        transactionsDataPojo.setObjectdata(jsonObject.get("selectedItemsList").toString());
////        transactionsDataPojo.setStatus(jsonObject.get("status").toString());
//        transactionsDataPojo.setStatus(status);
////        transactionsDataPojo.setTotalcheckoutamt(jsonObject.get("totalCheckOutamt").toString());
////        transactionsDataPojo.setTotaltax(jsonObject.get("totalTaxAmt").toString());
//        transactionsDataPojo.setTypeDoc(jsonObject.get("type_doc").toString());
//        transactionsDataPojo.setTypeFlag(jsonObject.get("type_flag").toString());
//        saasTranscationsDataService.getSalesDNSave(transactionsDataPojo);
//        return new IDMResponse(HttpStatus.OK.value(), "success");
//    }

//    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION  + HiConnectConstants.HI_CONNECT_FORM_DATA,method = RequestMethod.POST,
//            produces = MediaType.APPLICATION_JSON_VALUE)
//    public IDMResponse BroadCastPostSalesReturnData(@RequestBody String jsonString) throws JSONException {
//        JSONObject jsonObject = new JSONObject(jsonString);
//        Gson gson = new Gson();
//        String status = "pending";
//        TransactionsDataPojo transactionsDataPojo = new TransactionsDataPojo();
//        transactionsDataPojo.setObjectdata(jsonObject.get("selectedItemsList").toString());
////        transactionsDataPojo.setStatus(jsonObject.get("status").toString());
//        transactionsDataPojo.setStatus(status);
//        transactionsDataPojo.setTotalcheckoutamt(jsonObject.get("totalCheckOutamt").toString());
//        transactionsDataPojo.setTotaltax(jsonObject.get("totalTaxAmt").toString());
//        transactionsDataPojo.setTypeDoc(jsonObject.get("type_doc").toString());
//        transactionsDataPojo.setTypeFlag(jsonObject.get("type_flag").toString());
//        saasTranscationsDataService.getSalesInvoiceSave(transactionsDataPojo);
//        return new IDMResponse(HttpStatus.OK.value(), "success");
//    }


    // SalesQuotation

    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_BROADCAST_SQ_DATA, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse BroadCastPostSalesQuotationData(@RequestBody String jsonString) throws JSONException {
        SassCustomer customerObj = null;
        JSONObject jsonObject = new JSONObject(jsonString);
        Gson gson = new Gson();
        String status = "pending";

        CustomerNotificationsPojo customerNotificationsPojo = new CustomerNotificationsPojo();
        customerNotificationsPojo.setObjectdata(jsonObject.get("selectedItemsList").toString());
        customerNotificationsPojo.setTotalcheckoutamt(jsonObject.get("totalCheckOutamt").toString());
        customerNotificationsPojo.setTotaltax(jsonObject.get("totalTaxAmt").toString());
        customerNotificationsPojo.setFromRegno(jsonObject.get("from_reg").toString());
        customerNotificationsPojo.setToRegno(jsonObject.get("to_reg").toString());
        customerNotificationsPojo.setTypeDoc(jsonObject.get("typeDoc").toString());
        customerNotificationsPojo.setTypeFlag(jsonObject.get("type_flag").toString());
        customerNotificationsPojo.setStatus(status);
        customerNotificationsPojo.setSiNo(jsonObject.get("siNo").toString());
        customerObj = sassOrdersService.getSaasCustomerRegNoObj(customerNotificationsPojo.getFromRegno());
        customerNotificationsPojo.setFromCompname(customerObj.getCustomerName());
        sassCustomerNotificationsService.getSalesQuotationSave(customerNotificationsPojo);
        return new IDMResponse(HttpStatus.OK.value(), "success");
    }


    //purchase Quotation --> after accepting notification data appending and saving the data

    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_BROADCAST_PQ_DATA, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse BroadCastPostPurchaseQuotationData(@RequestBody String jsonString) throws JSONException {
        SassCustomer customerObj = null;
        JSONObject jsonObject = new JSONObject(jsonString);
        Gson gson = new Gson();
//        Long transactionId = Long.valueOf(jsonObject.get("transactionId").toString());
//        String status ="Accepted";

        CustomerNotificationsPojo customerNotificationsPojo = new CustomerNotificationsPojo();
        customerNotificationsPojo.setObjectdata(jsonObject.get("selectedItemsdata").toString());
        customerNotificationsPojo.setTotalcheckoutamt(jsonObject.get("totalCheckOutamt").toString());
        customerNotificationsPojo.setTotaltax(jsonObject.get("totalTaxAmt").toString());
        customerNotificationsPojo.setTypeDoc(jsonObject.get("typeDoc").toString());
        customerNotificationsPojo.setTypeFlag(jsonObject.get("typeFlag").toString());
        customerNotificationsPojo.setStatus(jsonObject.get("status").toString());
        customerNotificationsPojo.setPiNo(jsonObject.get("piNo").toString());
        customerNotificationsPojo.setFromRegno(jsonObject.get("from_reg").toString());
        customerNotificationsPojo.setState(jsonObject.get("supplierState").toString());
        customerNotificationsPojo.setCustNotiId(Long.valueOf(jsonObject.get("custNotiId").toString()));


        customerObj = sassOrdersService.getSaasCustomerRegNoObj(customerNotificationsPojo.getFromRegno());
        customerNotificationsPojo.setFromCompname(customerObj.getCustomerName());


//        String custNotiId = String.valueOf(jsonObject.get("custNotiId"));
//        customerNotifications.setToRegno(jsonObject.get("to_reg").toString());
//        Long transactionId = Long.valueOf(jsonObject.get("transactionId").toString());
//        Long notificationId = Long.valueOf(jsonObject.get("notificationId").toString());
//        TransactionsData transactionsData = sassOrdersService.getTransactionObject(transactionId);
//        transactionsData.setStatus(status);
//        transactionsData.setTypeDoc(jsonObject.get("typeDoc").toString());
////        transactionsData.setTypeFlag(jsonObject.get("typeFlag").toString());
//        transactionsData.setTransactionId(Long.valueOf(jsonObject.get("transactionId").toString()));
        sassCustomerNotificationsService.getPurchaseQuotationSave(customerNotificationsPojo);
        return new IDMResponse(HttpStatus.OK.value(), "success");
    }

//--> after accepting notification data appending and saving the data

    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION  + HiConnectConstants.HI_CONNECT_BROADCAST_PI_DATA,method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse BroadCastPostPurchaseInvoiceData(@RequestBody String jsonString) throws JSONException {
        SassCustomer customerObj = null;
        Gson gson = new Gson();
        JSONObject jsonObject = new JSONObject(jsonString);
//        Long transaction_id = Long.valueOf(jsonObject.get("transactionId").toString());
//        String status ="Accepted";
//        TransactionsData transactionsData = sassOrdersService.getTransactionObject(transaction_id);

        CustomerNotificationsPojo customerNotificationsPojo = new CustomerNotificationsPojo();
        customerNotificationsPojo.setObjectdata(jsonObject.get("selectedItemsdata").toString());
        customerNotificationsPojo.setTotalcheckoutamt(jsonObject.get("totalCheckOutamt").toString());
        customerNotificationsPojo.setTotaltax(jsonObject.get("totalTaxAmt").toString());
        customerNotificationsPojo.setTransactionId(Long.valueOf(jsonObject.get("transactionId").toString()));
        customerNotificationsPojo.setTypeDoc(jsonObject.get("typeDoc").toString());
        customerNotificationsPojo.setTypeFlag(jsonObject.get("typeFlag").toString());
        customerNotificationsPojo.setStatus(jsonObject.get("status").toString());
        customerNotificationsPojo.setFromRegno(jsonObject.get("from_reg").toString());
        customerNotificationsPojo.setPiNo(jsonObject.get("piNo").toString());
        customerNotificationsPojo.setState(jsonObject.get("supplierState").toString());
        customerNotificationsPojo.setFromCompname(jsonObject.get("fromCompname").toString());
        customerNotificationsPojo.setCustNotiId(Long.valueOf(jsonObject.get("custNotiId").toString()));
        customerObj = sassOrdersService.getSaasCustomerRegNoObj(customerNotificationsPojo.getFromRegno());
        customerNotificationsPojo.setFromCompname(customerObj.getCustomerName());
        //        transactionsData.setTypeDoc(jsonObject.get("typeDoc").toString());
////        transactionsData.setTypeFlag(jsonObject.get("typeFlag").toString());
//        transactionsData.setTransactionId(Long.valueOf(jsonObject.get("transaction_id").toString()));

        sassCustomerNotificationsService.getPurchaseInvoiceSave(customerNotificationsPojo);
        return new IDMResponse(HttpStatus.OK.value(), "success");
    }

    //CustomerPayment
    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_BROADCAST_CP_DATA, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse BroadCastPostCustomerPaymentData(@RequestBody String jsonString) throws JSONException {
        JSONObject jsonObject = new JSONObject(jsonString);
        Gson gson = new Gson();
        String status = "Accepted";
        CustomerNotifications customerNotifications = new CustomerNotifications();
        customerNotifications.setObjectdata(jsonString);
        customerNotifications.setStatus(status);
        customerNotifications.setTypeFlag(jsonObject.get("type_flag").toString());
        customerNotifications.setTypeDoc(jsonObject.get("type_doc").toString());
        customerNotifications.setFromCompname(jsonObject.get("supplierName").toString());
        saasTranscationsDataService.getCustomerPaymentSave(customerNotifications);
        return new IDMResponse(HttpStatus.OK.value(), "success");
    }

    //CreditNote
    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_BROADCAST_SCN_DATA, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse BroadCastPostSalesCreditNoteData(@RequestBody String jsonString) throws JSONException {
        Gson gson = new Gson();
        JSONObject jsonObject = new JSONObject(jsonString);
        CustomerNotifications customerNotifications = new CustomerNotifications();
        customerNotifications.setObjectdata(jsonObject.get("selectedItemsdata").toString());
        customerNotifications.setTypeDoc(jsonObject.get("typeDoc").toString());
        customerNotifications.setTypeFlag(jsonObject.get("typeFlag").toString());
        customerNotifications.setStatus(jsonObject.get("status").toString());
        customerNotifications.setFromCompname(jsonObject.get("customerName").toString());
        saasTranscationsDataService.getCreditNoteSave(customerNotifications);
        return new IDMResponse(HttpStatus.OK.value(), "success");
    }
    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION  + HiConnectConstants.HI_CONNECT_BROADCAST_SDR_DATA,method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse BroadCastPostSalesDeliveryReturnData(@RequestBody String jsonString) throws JSONException {
        JSONObject jsonObject = new JSONObject(jsonString);
        Long transaction_id = Long.valueOf(jsonObject.get("transaction_id").toString());
        String status ="Accepted";
        TransactionsData transactionsData = sassOrdersService.getTransactionObject(transaction_id);
        transactionsData.setStatus(status);
        transactionsData.setTypeDoc(jsonObject.get("typeDoc").toString());
//        transactionsData.setTypeFlag(jsonObject.get("typeFlag").toString());
        transactionsData.setTransactionId(Long.valueOf(jsonObject.get("transaction_id").toString()));
        saasTranscationsDataService.getSalesDeliveryReturnSave(transactionsData);
        return new IDMResponse(HttpStatus.OK.value(), "success");
    }

//    --> after accepting notification data appending and saving the data

    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION  + HiConnectConstants.HI_CONNECT_BROADCAST_SO_DATA,method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse BroadCastPostSalesOrderData(@RequestBody String jsonString) throws JSONException {
        SassCustomer customerObj = null;
        Gson gson = new Gson();
        JSONObject jsonObject = new JSONObject(jsonString);
//        Long transaction_id = Long.valueOf(jsonObject.get("transactionId").toString());
        CustomerNotificationsPojo customerNotificationsPojo = new CustomerNotificationsPojo();
        customerNotificationsPojo.setObjectdata(jsonObject.get("selectedItemsdata").toString());
        customerNotificationsPojo.setTotalcheckoutamt(jsonObject.get("totalCheckOutamt").toString());
        customerNotificationsPojo.setTotaltax(jsonObject.get("totalTaxAmt").toString());
        customerNotificationsPojo.setTypeDoc(jsonObject.get("typeDoc").toString());
        customerNotificationsPojo.setTypeFlag(jsonObject.get("typeFlag").toString());
        customerNotificationsPojo.setStatus(jsonObject.get("status").toString());
        customerNotificationsPojo.setSiNo(jsonObject.get("siNo").toString());
        customerNotificationsPojo.setFromRegno(jsonObject.get("from_reg").toString());
        customerNotificationsPojo.setState(jsonObject.get("customerAddress").toString());
        customerNotificationsPojo.setCustNotiId(Long.valueOf(jsonObject.get("custNotiId").toString()));
        customerObj = sassOrdersService.getSaasCustomerRegNoObj(customerNotificationsPojo.getFromRegno());
        customerNotificationsPojo.setFromCompname(customerObj.getCustomerName());

//        TransactionsData transactionsData = sassOrdersService.getTransactionObject(transaction_id);
//        transactionsData.setStatus(status);
//        transactionsData.setTypeDoc(jsonObject.get("typeDoc").toString());
////        transactionsData.setTypeFlag(jsonObject.get("typeFlag").toString());
//        transactionsData.setTransactionId(Long.valueOf(jsonObject.get("transaction_id").toString()));
        sassCustomerNotificationsService.getSalesOrderSave(customerNotificationsPojo);
        return new IDMResponse(HttpStatus.OK.value(), "success");
    }

    //Debit Note
    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_BROADCAST_PDN_DATA, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse BroadCastPostPurchaseDnData(@RequestBody String jsonString) throws JSONException {
        JSONObject jsonObject = new JSONObject(jsonString);
        String status = "Pending";
        CustomerNotifications customerNotifications = new CustomerNotifications();
        customerNotifications.setObjectdata(jsonString);
        customerNotifications.setStatus(status);
        customerNotifications.setToRegno(jsonObject.get("to_reg").toString());
        customerNotifications.setFromRegno(jsonObject.get("from_reg").toString());
        customerNotifications.setTypeDoc(jsonObject.get("type_doc").toString());
        customerNotifications.setTypeFlag(jsonObject.get("type_flag").toString());
        customerNotifications.setFromCompname(jsonObject.get("suppName").toString());
        saasTranscationsDataService.getDebitNoteSave(customerNotifications);
        return new IDMResponse(HttpStatus.OK.value(), "success");

    }

    //SaveNewItemData
    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_BROADCAST_SNI_DATA, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse BroadCastPostSaveNewItemData(@RequestBody String jsonString) throws JSONException {
        JSONObject jsonObject = new JSONObject(jsonString);
        Gson gson = new Gson();
        IcItem icItem = gson.fromJson(jsonString, IcItem.class);
        String msic = jsonObject.getString("itemMSICDTO");
        JSONObject jsonObject1 = new JSONObject(msic);
        icItem.setHsnCode(jsonObject1.get("code").toString());
        String brand = jsonObject.getString("itemBrandDTO");
        JSONObject jsonObject3 = new JSONObject(brand);
        icItem.setBrandName(jsonObject3.get("brandName").toString());
        String category = jsonObject.getString("itemCategoryDTO");
        JSONObject jsonObject4 = new JSONObject(category);
        icItem.setItemCategoryName(jsonObject4.get("itemCategoryName").toString());
        String itemtype = jsonObject.getString("itemTypeDTO");
        JSONObject jsonObject5 = new JSONObject(itemtype);
        icItem.setItemTypeName(jsonObject5.get("itemTypeName").toString());
        String counttype = jsonObject.getString("itemCountTypeDTO");
        JSONObject jsonObject9 = new JSONObject(counttype);
        icItem.setInventoryMovementName(jsonObject9.get("InventoryMovementName").toString());
        String inputtax = jsonObject.getString("itemIPTaxDTO");
        JSONObject jsonObject6 = new JSONObject(inputtax);
        icItem.setInputTaxId(jsonObject6.get("TaxCode").toString());
        String outputtax = jsonObject.getString("itemOPTaxDTO");
        JSONObject jsonObject7 = new JSONObject(outputtax);
        icItem.setOutputTaxId(jsonObject7.get("TaxCode").toString());
        String uom = jsonObject.getString("itemUOMTypeDTO");
        JSONObject jsonObject8 = new JSONObject(uom);
        icItem.setUnitOfMeasurementId(jsonObject8.get("UnitOfMeasurementName").toString());
        String cart=jsonObject.getString("addedCartsList");
        icItem.setItemSelectedCarts(cart);
        sassOrdersService.getSaveNewItemData(icItem);
        return new IDMResponse(HttpStatus.OK.value(), "success");
    }

    //SaveSalesInvoiceData
    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_BROADCAST_SSI_DATA, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse broadCastPostSaveSalesInvoiceData(@RequestBody String jsonString) throws JSONException {
        JSONObject jsonObject = new JSONObject(jsonString);
        Gson gson = new Gson();
        IcItem icItem = gson.fromJson(jsonString, IcItem.class);
        String selectitemlist = jsonObject.getString("selectedItemsList");
        JSONObject selecteditemlist = new JSONObject(selectitemlist.substring(selectitemlist.indexOf('{')));
        icItem.setItemCode(selecteditemlist.get("itemCode").toString());
        icItem.setItemName(selecteditemlist.get("itemName").toString());
        icItem.setItemDesc(selecteditemlist.get("itemDescription").toString());
        icItem.setItemStatus(jsonObject.get("siStatus").toString());
        sassOrdersService.getSaveSalesInvoiceData(icItem);
        return new IDMResponse(HttpStatus.OK.value(), "success");

    }

    //StockUpdate in icItem table in IDM with  EXISTING stock value
    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION + HiConnectConstants.HI_CONNECT_BROADCAST_PIS_DATA, method = RequestMethod.POST,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public IDMResponse broadCastPostPurchaseInvoiceStockUpdate(@RequestBody String jsonString) throws JSONException {
        JSONObject jsonObject = new JSONObject(jsonString);
        Gson gson = new Gson();
        String itemCode = jsonObject.getString("itemCode");
        String qty = jsonObject.getString("qty");
        IcItem icItemObj = icItemRepository.findByitemCode(itemCode);
        Double stockval = ( icItemObj.getStock() + Double.valueOf(qty));
        icItemObj.setStock(stockval);
        icItemRepository.save(icItemObj);
        return new IDMResponse(HttpStatus.OK.value(), "success");

    }


//    // SalesQuotation
//
//    @RequestMapping(value = HiConnectConstants.HI_CONNECT_VERSION  + HiConnectConstants.HI_CONNECT_BROADCAST_SQ_DATA,method = RequestMethod.POST,
//            produces = MediaType.APPLICATION_JSON_VALUE)
//    public IDMResponse BroadCastPostSalesQuotationData(@RequestBody String jsonString) throws JSONException {
//        JSONObject jsonObject = new JSONObject(jsonString);
//        Gson gson = new Gson();
//        String status = "pending";
//        TransactionsDataPojo transactionsDataPojo = new TransactionsDataPojo();
//        transactionsDataPojo.setObjectdata(jsonObject.get("selectedItemsList").toString());
////        transactionsDataPojo.setStatus(jsonObject.get("status").toString());
//        transactionsDataPojo.setStatus(status);
//        transactionsDataPojo.setTotalcheckoutamt(jsonObject.get("totalCheckOutamt").toString());
//        transactionsDataPojo.setTotaltax(jsonObject.get("totalTaxAmt").toString());
//        transactionsDataPojo.setTypeDoc(jsonObject.get("type_doc").toString());
//        transactionsDataPojo.setTypeFlag(jsonObject.get("type_flag").toString());
//        saasTranscationsDataService.getSalesQuotationSave(transactionsDataPojo);
//        return new IDMResponse(HttpStatus.OK.value(), "success");
//    }
}



