package com.hyva.idm.sass.sassservice;

import com.hyva.idm.sass.sassentities.CustomerNotifications;
import com.hyva.idm.sass.sassentities.SassCompany;
import com.hyva.idm.sass.sassentities.SassCustomer;
import com.hyva.idm.sass.sassmapper.CustomerNotificationMapper;
import com.hyva.idm.sass.sasspojo.CustomerNotificationsPojo;
import com.hyva.idm.sass.sassrespositories.SassCustomerNotificationsRepository;
import com.hyva.idm.sass.sassrespositories.SassCustomerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
public class SassCustomerNotificationsService {
    @Autowired
    SassCustomerNotificationsRepository sassCustomerNotificationsRepository;

    public CustomerNotifications getCustomerNotificationSave(CustomerNotificationsPojo customerNotificationsPojo, List<SassCompany> toreglist, List<SassCompany> fromreglist) {
        if((toreglist.size()>0 || fromreglist.size()>0) && (toreglist!=null || fromreglist!=null) ) {
            if(fromreglist.get(0).getCustomerAddress()!=null)
                customerNotificationsPojo.setFromAddress(fromreglist.get(0).getCustomerAddress());
            if(toreglist.get(0).getEmail()!=null)
                customerNotificationsPojo.setToEmail(toreglist.get(0).getEmail());
            if(toreglist.get(0).getCustomerName()!=null)
                customerNotificationsPojo.setToCompname(toreglist.get(0).getCustomerName());
            if(fromreglist.get(0).getCustomerName()!=null)
                customerNotificationsPojo.setFromCompname(fromreglist.get(0).getCustomerName());
            if(fromreglist.get(0).getCustomerNumber()!=null)
                customerNotificationsPojo.setFromContact(fromreglist.get(0).getCustomerNumber());
            if(fromreglist.get(0).getEmail()!=null)
                customerNotificationsPojo.setFromEmail(fromreglist.get(0).getEmail());
        }
//        customerNotificationsPojo.set
        CustomerNotifications customerNotifications = CustomerNotificationMapper.mapPojoToEntity(customerNotificationsPojo);
        customerNotifications = sassCustomerNotificationsRepository.save(customerNotifications);
        return customerNotifications;
    }

    public List<CustomerNotifications> getCustomerRegNo(String fromRegno,String status){
        List<CustomerNotifications> order =sassCustomerNotificationsRepository.findByToRegnoAndStatus(fromRegno,status);
        return order;
    }
    public CustomerNotifications getSalesQuotationSave(CustomerNotificationsPojo customerNotificationsPojo){
        CustomerNotifications customerNotifications = CustomerNotificationMapper.mapPojoToEntity(customerNotificationsPojo);
        customerNotifications = sassCustomerNotificationsRepository.save(customerNotifications);
        return customerNotifications;

    }
    public CustomerNotifications getPurchaseOrderSave(CustomerNotificationsPojo customerNotificationsPojo){
        CustomerNotifications customerNotifications = CustomerNotificationMapper.mapPojoToEntity(customerNotificationsPojo);
        customerNotifications = sassCustomerNotificationsRepository.save(customerNotifications);
        return customerNotifications;

    }
    public CustomerNotifications getSalesDOSave(CustomerNotificationsPojo customerNotificationsPojo){
        CustomerNotifications customerNotifications = CustomerNotificationMapper.mapPojoToEntity(customerNotificationsPojo);
        customerNotifications = sassCustomerNotificationsRepository.save(customerNotifications);
        return customerNotifications;

    }
    public CustomerNotifications getPurchaseQuotationSave(CustomerNotificationsPojo customerNotificationsPojo){
        CustomerNotifications customerNotifications = CustomerNotificationMapper.mapPojoToEntity(customerNotificationsPojo);
        customerNotifications = sassCustomerNotificationsRepository.save(customerNotifications);
        return customerNotifications;

    }
    public CustomerNotifications getPurchaseReceiveItemSave(CustomerNotificationsPojo customerNotificationsPojo){
        CustomerNotifications customerNotifications = CustomerNotificationMapper.mapPojoToEntity(customerNotificationsPojo);
        customerNotifications = sassCustomerNotificationsRepository.save(customerNotifications);
        return customerNotifications;

    }
    public CustomerNotifications getSalesOrderSave(CustomerNotificationsPojo customerNotificationsPojo){
        CustomerNotifications customerNotifications = CustomerNotificationMapper.mapPojoToEntity(customerNotificationsPojo);
        customerNotifications = sassCustomerNotificationsRepository.save(customerNotifications);
        return customerNotifications;

    }
    public CustomerNotifications getPurchaseInvoiceSave(CustomerNotificationsPojo customerNotificationsPojo){
        CustomerNotifications customerNotifications = CustomerNotificationMapper.mapPojoToEntity(customerNotificationsPojo);
        customerNotifications = sassCustomerNotificationsRepository.save(customerNotifications);
        return customerNotifications;

    }
    public CustomerNotifications getSalesInvoiceSave(CustomerNotificationsPojo customerNotificationsPojo){
        CustomerNotifications customerNotifications = CustomerNotificationMapper.mapPojoToEntity(customerNotificationsPojo);
        customerNotifications = sassCustomerNotificationsRepository.save(customerNotifications);
        return customerNotifications;

    }

    public CustomerNotifications getStatus(String fromRegno,String typeFlag){
        CustomerNotifications gettingstatus =sassCustomerNotificationsRepository.findByToRegnoAndTypeFlag(fromRegno,typeFlag);
        return gettingstatus;
    }
}
