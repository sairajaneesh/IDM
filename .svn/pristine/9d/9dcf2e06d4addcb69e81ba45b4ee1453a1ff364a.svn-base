package com.hyva.idm.sass.sassservice;
import com.hyva.idm.exceptions.BadRequestException;
import com.hyva.idm.sass.sassentities.*;
import com.hyva.idm.sass.sassmapper.SassOrdersMapper;
import com.hyva.idm.sass.sasspojo.SassOrdersPojo;
import com.hyva.idm.sass.sassrespositories.PosPaymentTypesRepository;
import com.hyva.idm.sass.sassrespositories.SassCustomerRepository;
import com.hyva.idm.sass.sassrespositories.SassOrdersRepository;
import com.hyva.idm.sass.sassrespositories.SassSubscriptionRepository;
import com.hyva.idm.sass.sassutil.ObjectMapperUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static com.hyva.idm.sass.sassutil.AccessTokenGenerator.randomAlphaNumeric;


@Component
public class SassOrdersService {
    @Autowired
    SassOrdersRepository sassOrdersRepository;
    @Autowired
    SassSubscriptionRepository sassSubscriptionRepository;
    @Autowired
    SassCustomerRepository sassCustomerRepository;
    @Autowired
    PosPaymentTypesRepository posPaymentTypesRepository;

    public SassCustomer getCustomerObj(SassCustomer credentials)
    {
        SassCustomer sassCustomer=sassCustomerRepository.findByEmailAndLoginNameAndLoginPassword(credentials.getEmail(),credentials.getLoginName(),credentials.getLoginPassword());
        return sassCustomer;
    }
    @Transactional
    public SassOrders createOrder(SassOrdersPojo sassOrdersPojo) {
        SassOrders sassOrders = SassOrdersMapper.mapPojoToEntity(sassOrdersPojo);
     //   sassOrders.setSassSubscriptionsId(new SassSubscriptions(Long.parseLong(sassOrdersPojo.getSubscriptionId())));
        String licenceKey=getLicenceKey(sassOrdersPojo);
        sassOrders.setLicenceKey(licenceKey);
        SassCustomer sassCustomer= new SassCustomer();
        sassCustomer.setCustomerName(sassOrdersPojo.getCustomerName());
        sassCustomer.setEmail(sassOrdersPojo.getCustomerEmail());
        sassCustomerRepository.save(sassCustomer);
        PosPaymentTypes posPaymentTypes=new PosPaymentTypes();
        posPaymentTypes.setTotalAmount(60);
        posPaymentTypesRepository.save(posPaymentTypes);
        sassOrdersRepository.save(sassOrders);
        return sassOrders;
    }




    public List<SassOrders>  getOrderListByEmail(String email){
        List<SassOrders> order =sassOrdersRepository.findByCompanyEmail(email);



//        List<SassOrders> orderPojos = new ArrayList<>();
//        order.forEach(orderEntity -> {
//            orderPojos.add(orderEntity);
//
//        });
        return order;


    }


    public List<SassOrdersPojo> OrderList() {
        List<SassOrders> sassOrders = (List<SassOrders>) sassOrdersRepository.findAll();
        List<SassOrdersPojo> sassOrdersPojos = ObjectMapperUtils.mapAll(sassOrders, SassOrdersPojo.class);
        return sassOrdersPojos;
    }
public List<PosPaymentTypes> getPaymentsList(){
    Iterable<PosPaymentTypes> posPaymentTypes=posPaymentTypesRepository.findAll();
    List<PosPaymentTypes> posPaymentTypes1 = new ArrayList<>();
    posPaymentTypes.forEach(PosPaymentTypes -> {
        posPaymentTypes1.add(PosPaymentTypes);

    });
    return posPaymentTypes1;

    }
    public SassOrders generateParentToken(SassOrders sassOrders){
         String token=randomAlphaNumeric();
        sassOrders.setLoginUniqueId(token);
        sassOrders.setLoginUniqueIdExpiry(new Date());
        return sassOrders;
    }
    public  SassOrders validateLicensekey(String licensekey) {
        SassOrders sassOrders;
        sassOrders = sassOrdersRepository.getSassOrdersByLicenceKey(licensekey);
        if (sassOrders == null) {
            throw new BadRequestException("user not found", HttpStatus.BAD_REQUEST.value());
        }
        return sassOrders;
    }
    public String UpdatePermissionGpandPm(){

//        List<PermissionGroup> masterPermissionGroupList = multiCompanyDao.listMasterPermissionGroup();
//        if (masterPermissionGroupList.isEmpty()) {
//            HSSFSheet sheet = readingXlsFile.getXlsSheet("accounts/Permission_Group.xls");
//            HSSFRow hssfRow;
//            Iterator iterable = sheet.rowIterator();
//            while (iterable.hasNext()) {
//                PermissionGroup groupObj = new PermissionGroup();
//                hssfRow = (HSSFRow) iterable.next();
//                String description = hssfRow.getCell(0).toString();
//                String featureName = hssfRow.getCell(1).toString();
//                String pgKey = hssfRow.getCell(2).toString();
//                String saasStatus = hssfRow.getCell(3).toString();
//                PermissionGroup permissionGroup = new PermissionGroup();
//                permissionGroup.setDescription(description);
//                permissionGroup.setFeatureName(featureName);
//                permissionGroup.setPgkey(pgKey);
//                permissionGroup.setSaasStatus(saasStatus);
//                multiCompanyDao.save(permissionGroup);
//            }
//        }42
//        List<PermissionMaster> permissionMasterList = multiCompanyDao.listMasterPermissionMaster();
//        if(permissionMasterList.isEmpty()) {
//            HSSFSheet sheet = readingXlsFile.getXlsSheet("accounts/Invetorylevel3.xls");
//            HSSFRow hssfRow;
//            Iterator iterable = sheet.rowIterator();
//            while (iterable.hasNext()) {
//                addNewItemDTO itemDTO = null;
//                hssfRow = (HSSFRow) iterable.next();
//                Cell accountgroup = hssfRow.getCell(0);
//                Cell level1 = hssfRow.getCell(1);
//                Cell level2 = hssfRow.getCell(2);
//                Cell description = hssfRow.getCell(3);
//                Cell status = hssfRow.getCell(4);
//                Cell permissionkey = hssfRow.getCell(5);
//                PermissionMasterDTO permissionMasterDTO = new PermissionMasterDTO();
//                if (accountgroup != null) {
//                    com.hyva.master.entities.PermissionGroup permissionGroup = hiposService.getpermissionMasterGroupMaster(accountgroup.toString());
//                    if (permissionGroup != null) {
//                        permissionMasterDTO.setPgId(permissionGroup.getPgId());
//                    }
//                    com.hyva.master.entities.PermissionMaster permissionMaster = null;
//                    if (level1 != null) {
//                        permissionMaster = hiposService.getpermissionMasterMaster(level1.toString());
//                        if (permissionMaster != null) {
//                            permissionMasterDTO.setPmId(Long.parseLong(permissionMaster.getPmId().toString()));
//                        } else {
//                            permissionMasterDTO.setPmId(null);
//                        }
//                    } else {
//                        permissionMasterDTO.setPmId(null);
//                    }
//                    if (level2 != null) {
//                        permissionMaster = hiposService.getpermissionMasterMaster(level2.toString());
//                        if (permissionMaster != null) {
//                            permissionMasterDTO.setPmId(Long.parseLong(permissionMaster.getPmId().toString()));
//                        } else {
//                            permissionMasterDTO.setPmId(null);
//                        }
//                    } else {
//                        permissionMasterDTO.setPmId(null);
//                    }
//                    permissionMasterDTO.setDescription(description.toString());
//                    permissionMasterDTO.setSaasStatus(status.toString());
//                    permissionMasterDTO.setPermissionMasterkey(permissionkey.toString());
//                    hiposService.NewpermissionMaster(permissionMasterDTO);
//
//                }}}
        return null;

    }

    public String  getLicenceKey(SassOrdersPojo sassOrdersPojo) {
        String requestUrl = "http://cloud.hiaccounts.com:8890/licenser/getlicense";
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
        MultiValueMap<String, String> uriParams= new LinkedMultiValueMap<String, String>();
        uriParams.add("companyName", sassOrdersPojo.getCompanyName());
        uriParams.add("emailId", sassOrdersPojo.getCompanyEmail());
        uriParams.add("customerName", "Azgar Idm Test");
        uriParams.add("EditionName", "professional");
        uriParams.add("validity", "50");
        HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(uriParams, headers);
        System.out.println("SSS"+uriParams);
        RestTemplate restTemplate = new RestTemplate();
        String response = restTemplate.postForObject(requestUrl, request, String.class);
//      JSONObject jsonObj = new JSONObject();
//      String balance = jsonObj.get("data").toString();
        return response;
    }





    public String  getLicenceKeyManual(SassOrdersPojo sassOrdersPojo) {
        String requestUrl = "http://cloud.hiaccounts.com:8890/licenser/getlicense";
      //  License license= LicenceController.getManualActivationRequestString();
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
        MultiValueMap<String, String> uriParams= new LinkedMultiValueMap<String, String>();
        uriParams.add("companyName", sassOrdersPojo.getCompanyName());
        uriParams.add("emailId", sassOrdersPojo.getCompanyEmail());
        uriParams.add("customerName", "Azgar Idm Test");
        uriParams.add("EditionName", "professional");
        uriParams.add("validity", "50");
        HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(uriParams, headers);
        System.out.println("SSS"+uriParams);
        RestTemplate restTemplate = new RestTemplate();
        String response = restTemplate.postForObject(requestUrl, request, String.class);
//      JSONObject jsonObj = new JSONObject();
//      String balance = jsonObj.get("data").toString();
        return response;
    }

   public SassOrders validateParent_Token(String parent_Token,String email){
       SassCustomer sassCustomer=sassCustomerRepository.findByEmailAndLoginUniqueId(parent_Token,email);
    if(sassCustomer!=null){
        String token=randomAlphaNumeric();

    }
       SassOrders sassOrders=new SassOrders();
        return sassOrders;
   }




}